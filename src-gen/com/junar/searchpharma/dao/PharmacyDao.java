package com.junar.searchpharma.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.junar.searchpharma.Pharmacy;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PHARMACY.
*/
public class PharmacyDao extends AbstractDao<Pharmacy, Long> {

    public static final String TABLENAME = "PHARMACY";

    /**
     * Properties of entity Pharmacy.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Region = new Property(2, String.class, "region", false, "REGION");
        public final static Property Commune = new Property(3, String.class, "commune", false, "COMMUNE");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Day = new Property(5, Integer.class, "day", false, "DAY");
        public final static Property Month = new Property(6, Integer.class, "month", false, "MONTH");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Latitude = new Property(8, Long.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(9, Long.class, "longitude", false, "LONGITUDE");
        public final static Property Photo = new Property(10, String.class, "photo", false, "PHOTO");
        public final static Property Comment = new Property(11, String.class, "comment", false, "COMMENT");
    };


    public PharmacyDao(DaoConfig config) {
        super(config);
    }
    
    public PharmacyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PHARMACY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'REGION' TEXT," + // 2: region
                "'COMMUNE' TEXT," + // 3: commune
                "'ADDRESS' TEXT," + // 4: address
                "'DAY' INTEGER," + // 5: day
                "'MONTH' INTEGER," + // 6: month
                "'PHONE' TEXT," + // 7: phone
                "'LATITUDE' INTEGER," + // 8: latitude
                "'LONGITUDE' INTEGER," + // 9: longitude
                "'PHOTO' TEXT," + // 10: photo
                "'COMMENT' TEXT);"); // 11: comment
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_PHARMACY_MONTH_DAY ON PHARMACY" +
                " (MONTH,DAY);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PHARMACY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Pharmacy entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(3, region);
        }
 
        String commune = entity.getCommune();
        if (commune != null) {
            stmt.bindString(4, commune);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        Integer day = entity.getDay();
        if (day != null) {
            stmt.bindLong(6, day);
        }
 
        Integer month = entity.getMonth();
        if (month != null) {
            stmt.bindLong(7, month);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        Long latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindLong(9, latitude);
        }
 
        Long longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindLong(10, longitude);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(11, photo);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(12, comment);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Pharmacy readEntity(Cursor cursor, int offset) {
        Pharmacy entity = new Pharmacy( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // region
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // commune
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // day
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // month
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // latitude
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // longitude
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // photo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // comment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Pharmacy entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRegion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommune(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDay(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMonth(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLatitude(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setLongitude(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setPhoto(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setComment(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Pharmacy entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Pharmacy entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
