package com.junar.searchpharma;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.util.Log;
import cl.gob.datos.farmacias.R;

import com.google.android.gms.maps.model.BitmapDescriptor;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.maps.android.clustering.ClusterItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PHARMACY.
 */
public class Pharmacy implements ClusterItem {

    private static final String TAG = Pharmacy.class.getSimpleName();
    private Long id;
    private String name;
    private String region;
    private String commune;
    private String address;
    private Integer day;
    private Integer month;
    private String phone;
    private Double latitude;
    private Double longitude;
    private String photo;
    private String openFrom;
    private String openTo;
    private java.util.Date syncroDate;
    private String type;
    private float distance;
    private String scheduleComplete;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public float getDistance() {
        return distance;
    }

    public void setDistance(float distance) {
        this.distance = distance;
    }

    public Pharmacy() {
    }

    public Pharmacy(Long id) {
        this.id = id;
    }

    public Pharmacy(Long id, String name, String region, String commune,
            String address, Integer day, Integer month, String phone,
            Double latitude, Double longitude, String photo, String openFrom,
            String openTo, java.util.Date syncroDate, String type) {
        this.id = id;
        this.name = name;
        this.region = region;
        this.commune = commune;
        this.address = address;
        this.day = day;
        this.month = month;
        this.phone = phone;
        this.latitude = latitude;
        this.longitude = longitude;
        this.photo = photo;
        this.openFrom = openFrom;
        this.openTo = openTo;
        this.syncroDate = syncroDate;
        this.type = type;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getRegion() {
        return region;
    }

    public void setRegion(String region) {
        this.region = region;
    }

    public String getCommune() {
        return commune;
    }

    public void setCommune(String commune) {
        this.commune = commune;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public Integer getDay() {
        return day;
    }

    public void setDay(Integer day) {
        this.day = day;
    }

    public Integer getMonth() {
        return month;
    }

    public void setMonth(Integer month) {
        this.month = month;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public Double getLatitude() {
        return latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    public String getPhoto() {
        return photo;
    }

    public void setPhoto(String photo) {
        this.photo = photo;
    }

    public String getOpenFrom() {
        return openFrom;
    }

    public void setOpenFrom(String openFrom) {
        this.openFrom = openFrom;
    }

    public String getOpenTo() {
        return openTo;
    }

    public void setOpenTo(String openTo) {
        this.openTo = openTo;
    }

    public java.util.Date getSyncroDate() {
        return syncroDate;
    }

    public void setSyncroDate(java.util.Date syncroDate) {
        this.syncroDate = syncroDate;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @Override
    public String toString() {
        return "Pharmacy [name=" + name + ", region=" + region + ", commune="
                + commune + ", address=" + address + ", day=" + day
                + ", month=" + month + ", phone=" + phone + ", latitude="
                + latitude + ", longitude=" + longitude + ", photo=" + photo
                + ", distance=" + distance + "]";
    }

    public String getSchedule() {
        return "DESDE LAS " + this.getOpenFrom() + " HASTA LAS "
                + this.getOpenTo();
    }

    public String getScheduleComplete() {
        if (scheduleComplete != null) {
            return scheduleComplete;
        } else {
            return getSchedule();
        }
    }

    public void setScheduleComplete(String schedule) {
        scheduleComplete = "NORMAL: " + schedule + "\nTURNO: " + getSchedule();
    }

    public boolean isOpened() {
        try {
            Date currentDate = new Date();
            SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
            String cadenaFecha = dateFormat.format(currentDate);
            Date hourFrom = dateFormat.parse(openFrom);
            Date hourTo = dateFormat.parse(openTo);
            Date currentHour = dateFormat.parse(cadenaFecha);

            if ((hourFrom.compareTo(currentHour) < 0 && (hourTo
                    .compareTo(hourFrom) < 0 || currentHour.compareTo(hourTo) < 0))
                    || (hourFrom.compareTo(hourTo) == 0)) {
                return true;
            }
        } catch (ParseException e) {
            Log.e(TAG, e.getMessage());
        }
        return false;
    }

    public Drawable getStatusImage(Context context) {
        if (getType().equalsIgnoreCase("T")) {
            return context.getResources().getDrawable(R.drawable.de_turno);
        } else {
            if (isOpened()) {
                return context.getResources().getDrawable(R.drawable.abierta);
            } else {
                return context.getResources().getDrawable(R.drawable.cerrada);
            }
        }
    }

    public Drawable getStatusImageDetail(Context context) {
        if (getType().equalsIgnoreCase("T")) {
            return context.getResources().getDrawable(
                    R.drawable.de_turno_detalle);
        } else {
            if (isOpened()) {
                return context.getResources().getDrawable(
                        R.drawable.abierta_detalle);
            } else {
                return context.getResources().getDrawable(
                        R.drawable.cerrada_detalle);
            }
        }
    }

    public BitmapDescriptor getMarkerIcon() {
        BitmapDescriptor bitmapDescriptor = BitmapDescriptorFactory
                .fromResource(R.drawable.marker);
        if (getType().equals("N")) {
            if (isOpened()) {
                bitmapDescriptor = BitmapDescriptorFactory
                        .fromResource(R.drawable.marker_opened);
            } else {
                bitmapDescriptor = BitmapDescriptorFactory
                        .fromResource(R.drawable.marker_closed);
            }
        }
        return bitmapDescriptor;
    }

    @Override
    public LatLng getPosition() {
        if (latitude != 0 && longitude != 0) {
            return new LatLng(latitude, longitude);
        }
        return null;
    }

}
